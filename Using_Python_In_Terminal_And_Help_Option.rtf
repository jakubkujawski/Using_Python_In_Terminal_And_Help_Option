{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red23\green186\blue251;\red18\green145\blue206;
}
{\*\expandedcolortbl;;\csgray\c0;\cssrgb\c0\c77905\c98860;\cssrgb\c0\c63852\c84489;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs36 \cf2 \CocoaLigature0 \
MacBook-Pro-Jacob:~ Jakub$ \cf3 python3\cf2 \
Python 3.12.5 (v3.12.5:ff3bc82f7c9, Aug  7 2024, 05:32:06) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin\
Type "help", "copyright", "credits" or "license" for more information.\
>>> \cf3 help()\cf2 \
Welcome to Python 3.12's help utility! If this is your first time using\
Python, you should definitely check out the tutorial at\
https://docs.python.org/3.12/tutorial/.\
\
Enter the name of any module, keyword, or topic to get help on writing\
Python programs and using Python modules.  To get a list of available\
modules, keywords, symbols, or topics, enter "modules", "keywords",\
"symbols", or "topics".\
\
Each module also comes with a one-line summary of what it does; to list\
the modules whose name or summary contain a given string such as "spam",\
enter "modules spam".\
\
To quit this help utility and return to the interpreter,\
enter "q" or "quit".\
help> \cf3 topics\cf2 \
\
Here is a list of available topics.  Enter any topic name to get more help.\
\
ASSERTION           DELETION            LOOPING             SHIFTING\
ASSIGNMENT          DICTIONARIES        MAPPINGMETHODS      SLICINGS\
ATTRIBUTEMETHODS    DICTIONARYLITERALS  MAPPINGS            SPECIALATTRIBUTES\
ATTRIBUTES          DYNAMICFEATURES     METHODS             SPECIALIDENTIFIERS\
AUGMENTEDASSIGNMENT ELLIPSIS            MODULES             SPECIALMETHODS\
BASICMETHODS        EXCEPTIONS          NAMESPACES          STRINGMETHODS\
BINARY              EXECUTION           NONE                STRINGS\
BITWISE             EXPRESSIONS         NUMBERMETHODS       SUBSCRIPTS\
BOOLEAN             FLOAT               NUMBERS             TRACEBACKS\
CALLABLEMETHODS     FORMATTING          OBJECTS             TRUTHVALUE\
CALLS               FRAMEOBJECTS        OPERATORS           TUPLELITERALS\
CLASSES             FRAMES              PACKAGES            TUPLES\
CODEOBJECTS         FUNCTIONS           POWER               TYPEOBJECTS\
COMPARISON          IDENTIFIERS         PRECEDENCE          TYPES\
COMPLEX             IMPORTING           PRIVATENAMES        UNARY\
CONDITIONAL         INTEGER             RETURNING           UNICODE\
CONTEXTMANAGERS     LISTLITERALS        SCOPING             \
CONVERSIONS         LISTS               SEQUENCEMETHODS     \
DEBUGGING           LITERALS            SEQUENCES           \
\
help> \cf4 LISTS\cf2 \
\
help> \cf4 quit\cf2 \
\
You are now leaving help and returning to the Python interpreter.\
If you want to ask for help on a particular object directly from the\
interpreter, you can type "help(object)".  Executing "help('string')"\
has the same effect as typing a particular string at the help> prompt.\
>>> \cf3 help('LISTS')\cf2 \
\
>>> \
}